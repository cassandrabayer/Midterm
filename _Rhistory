colorNumeric(palette = palette, rents$price, domain = c(0,10000))
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(rents) %>% addProviderTiles("Stamen.TonerLite") %>%
fitBounds(-122.528, 37.659645,-122.037708, 37.922)
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
pal <- colorpal()
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
addCircles(radius = ~((price/5)*commute)/50, weight = 1, color = "#777777",
fillColor = ~pal(price), fillOpacity = 0.9,
popup = ~paste('Price: $',price, '<br>',
' Bedrooms: ', bedrooms, '<br>',
' Av Commute: ', commute,'min',sep = "")
)
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("map", data = rents)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(title = "Rent", position = "bottomright",
pal = pal, values = c(0,10000)
)
}
})
},
options = list(height = 600)
)
shinyApp(
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("price", "Monthly Rent", 250, max(10000),
value = range(1000,5000), step = 50, ticks = F
),
sliderInput("commute", "Commute in Minutes to Downtown SF", 0, 180,
value = range(10,80), step = 5, ticks = F
),
#selectInput("neighborhood", "Neighborhoods",
#            neighborhood_names
#selectInput("county", "County",
#county_names
checkboxInput("legend", "Show legend", TRUE)
)
),
server = function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
# select these
these <- (rents$price >= input$price[1] & rents$price <= input$price[2]) &
(rents$commute >= input$commute[1] & rents$commute <= input$commute[2])
# subset
rents[these,]
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
colorNumeric(palette = palette, rents$price, domain = c(0,10000))
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(rents) %>% addProviderTiles("Stamen.TonerLite") %>%
fitBounds(-122.528, 37.659645,-122.137708, 37.922)
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
pal <- colorpal()
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
addCircles(radius = ~((price/5)*commute)/50, weight = 1, color = "#777777",
fillColor = ~pal(price), fillOpacity = 0.9,
popup = ~paste('Price: $',price, '<br>',
' Bedrooms: ', bedrooms, '<br>',
' Av Commute: ', commute,'min',sep = "")
)
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("map", data = rents)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(title = "Rent", position = "bottomright",
pal = pal, values = c(0,10000)
)
}
})
},
options = list(height = 600)
)
shinyApp(
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("price", "Monthly Rent", 250, max(10000),
value = range(1000,5000), step = 50, ticks = F
),
sliderInput("commute", "Commute in Minutes to Downtown SF", 0, 180,
value = range(10,80), step = 5, ticks = F
),
#selectInput("neighborhood", "Neighborhoods",
#            neighborhood_names
#selectInput("county", "County",
#county_names
checkboxInput("legend", "Show legend", TRUE)
)
),
server = function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
# select these
these <- (rents$price >= input$price[1] & rents$price <= input$price[2]) &
(rents$commute >= input$commute[1] & rents$commute <= input$commute[2])
# subset
rents[these,]
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
colorNumeric(palette = palette, rents$price, domain = c(0,10000))
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(rents) %>% addProviderTiles("Stamen.TonerLite") %>%
fitBounds(-122.428, 37.659645,-122.237708, 37.922)
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
pal <- colorpal()
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
addCircles(radius = ~((price/5)*commute)/50, weight = 1, color = "#777777",
fillColor = ~pal(price), fillOpacity = 0.9,
popup = ~paste('Price: $',price, '<br>',
' Bedrooms: ', bedrooms, '<br>',
' Av Commute: ', commute,'min',sep = "")
)
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("map", data = rents)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(title = "Rent", position = "bottomright",
pal = pal, values = c(0,10000)
)
}
})
},
options = list(height = 600)
)
setwd("/Users/nancystetson/Google Drive/Midterm/Midterm Presentation")
library(lubridate)
library(tidyverse)
library(gmapsdistance)
rents_index <- read_csv('rents_indexed.csv')
set.api.key('AIzaSyABWtZiob-wCCGzItapg0cMEs5a--KcWZ0')
thursday <- as.numeric(ymd_hms("2016-10-20 09:00:00 PDT"))
# lubridate broken, but internet tells me it is 1475769600 (doesn't seem right actually)
rents_to_4000 <- rents_index[3001:4000,]
ptm <- proc.time()
opt <- gmapsdistance(origin = rents_to_4000$location, # 100 locations
destination = "37.784765+-122.407737",  #Downtown SF
mode = "driving",
traffic_model = "optimistic", # Can also be pessimistic
arrival = thursday)
setwd("/Users/nancystetson/Google Drive/Midterm/Midterm Presentation")
library(lubridate)
library(tidyverse)
library(gmapsdistance)
rents_index <- read_csv('rents_indexed.csv')
set.api.key('AIzaSyABWtZiob-wCCGzItapg0cMEs5a--KcWZ0')
thursday <- as.numeric(ymd_hms("2016-10-20 09:00:00 PDT"))
# lubridate broken, but internet tells me it is 1475769600 (doesn't seem right actually)
rents_to_4000 <- rents_index[3001:4000,]
ptm <- proc.time()
opt <- gmapsdistance(origin = rents_to_4000$location, # 100 locations
destination = "37.784765+-122.407737",  #Downtown SF
mode = "driving",
traffic_model = "optimistic", # Can also be pessimistic
arrival = thursday)
pes <- gmapsdistance(origin = rents_to_4000$location, # 100 locations
destination = "37.784765+-122.407737",  #Downtown SF
mode = "driving",
traffic_model = "pessimistic", # Can also be pessimistic
arrival = thursday)
proc.time() - ptm
optimistic <- as.data.frame(opt$Time)
pessimistic <- as.data.frame(pes$Time)
optimistic$opt_time <- optimistic$`Time.37.784765+-122.407737`
optimistic$pes_time <- pessimistic$`Time.37.784765+-122.407737`
time_to <- optimistic
time_to <- time_to %>%
select(-`Time.37.784765+-122.407737`)
time_to  <- time_to %>%
mutate(opt_minutes = opt_time /60) %>%
mutate(pes_minutes = pes_time / 60)
rents_to_4000 <- left_join(time_to, rents_to_4000, by = c("or" = "location"))
write_csv(rents_to_4000, "rents_to_4000.csv")
rm(list =ls())
# read in rent data
rents1 <- read_csv("rents_to_1000.csv")
rents2 <- read.csv("rents_to_2000.csv")
rents3 <- read_csv('rents_to_3000.csv')
rents4 <- read_csv('rents_to_4000.csv')
# bind together
rents <- rbind(rents1, rents2)
rents <- rbind(rents, rents3)
rents <- rbind(rents, rents4)
write_csv(rents, 'rents_4000long.csv')
rm(list = ls())
library(tidyverse)
library(stringr) # we'll need this one!
# load in data --------
CA_vacc <- read_csv("2011-2012 Vaccination Data.csv")
setwd('/Users/nancystetson/Google Drive/R/dspp/HW5')
CA_vacc <- read_csv("2011-2012 Vaccination Data.csv")
x <- CA_vacc %>%
is.na(uptodate)
x <- is.na(CA_vacc$uptodate)
summary(is.na(CA_vacc$uptodate))
x <- summary(is.na(CA_vacc$uptodate))
summary(is.na(CA_vacc$uptodate))
View(CA_vacc)
View(CA_vacc)
CA_vacc$Lutheran <- str_detect(SCHOOL_NAME, 'LUTHERAN')
CA_vacc$Lutheran <- str_detect(CA_vacc$SCHOOL_NAME, 'LUTHERAN')
sum(is.na(CA_vacc$uptodate))
sum(CA_vacc$Lutheran)
CA_vacc$Lutheran1 <- str_detect(CA_vacc$SCHOOL_NAME, 'LUTH')
sum(CA_vacc$Lutheran1)
x <- CA_vacc %>% subset(Luteran1 == T) %>% summary(PUBPRIV)
x <- CA_vacc %>% subset(Lutheran1 == T) %>% summary(PUBPRIV)
x
CA_vacc %>% subset(Lutheran1 == T) %>% summary(PUBPRIV)
CA_vacc %>% subset(Lutheran1 == T) %>% select(PUBPRIV) %>% summary()
CA_vacc %>% subset(Lutheran1 == T) %>% select(PUBPRIV) %>% count()
CA_vacc %>% subset(Lutheran1 == T) %>% count(PUBPRIV == 'PRIV')
CA_vacc$Catholic <- CA_vacc %>%
mutate(Catholic = ifelse(str_detect(CA_vacc$SCHOOL_NAME, 'SAINT'),TRUE))
CA_vacc$Catholic <- CA_vacc %>%
mutate(Catholic = ifelse(str_detect(CA_vacc$SCHOOL_NAME, 'SAINT'),TRUE), FALSE)
CA_vacc$Catholic <- CA_vacc %>%
mutate(Catholic = ifelse(str_detect(CA_vacc$SCHOOL_NAME, 'SAINT'),TRUE, FALSE))
CA_vacc$Catholic <- CA_vacc %>%
mutate(Catholic = ifelse(str_detect(SCHOOL_NAME, 'SAINT'),TRUE, F)
)
CA_vacc$Catholic <- CA_vacc %>%
mutate(Catholic =
ifelse(str_detect(SCHOOL_NAME, 'SAINT'),T,
ifelse(str_detect(SCHOOL_NAME, 'ST\.'),T,
ifelse(str_detect(SCHOOL_NAME, 'HOLY'),T, F))))
CA_vacc$Catholic <- CA_vacc %>%
mutate(Catholic =
ifelse(str_detect(SCHOOL_NAME, 'SAINT'),T,
ifelse(str_detect(SCHOOL_NAME, "ST\." ),T,
ifelse(str_detect(SCHOOL_NAME, 'HOLY'),T, F))))
CA_vacc$Catholic <- CA_vacc %>%
mutate(Catholic =
ifelse(str_detect(SCHOOL_NAME, 'SAINT'),T,
ifelse(str_detect(SCHOOL_NAME, "ST." ),T,
ifelse(str_detect(SCHOOL_NAME, 'HOLY'),T, F))))
count(CA_vacc$Catholic)
count(CA_vacc$Catholic == T)
sum(CA_vacc$Catholic == T)
View(CA_vacc)
View(CA_vacc)
library(tidyverse)
library(stringr) # we'll need this one!
# load in data --------
CA_vacc <- read_csv("2011-2012 Vaccination Data.csv")
sum(is.na(CA_vacc$uptodate))
# 91 missing values
CA_vacc$Lutheran <- str_detect(CA_vacc$SCHOOL_NAME, 'LUTHERAN')
sum(CA_vacc$Lutheran)
CA_vacc$Lutheran1 <- str_detect(CA_vacc$SCHOOL_NAME, 'LUTH')
sum(CA_vacc$Lutheran1)
# Yep, we missed one
CA_vacc %>% subset(Lutheran1 == T) %>% count(PUBPRIV == 'PRIV')
# All 92 are private schools.
CA_vacc <- CA_vacc %>%
mutate(Catholic =
ifelse(str_detect(SCHOOL_NAME, 'SAINT'),T,
ifelse(str_detect(SCHOOL_NAME, "ST." ),T,
ifelse(str_detect(SCHOOL_NAME, 'HOLY'),T, F))))
sum(CA_vacc$Catholic == T)
CA_vacc %>% subset(Catholic == T) %>% count(PUBPRIV == 'PRIV', PUBPRIV=="PUB")
CA_vacc %>% subset(Catholic == T) %>% count(PUBPRIV == 'PRIV')
x <- CA_vacc %>% subset(Lutheran1 == T) %>% select('PUBPRIV')
x <- CA_vacc %>% subset(Lutheran1 == T) %>% select(PUBPRIV)
View(x)
View(x)
count(CA_vacc$Lutheran1)
x <- CA_vacc %>% subset(Lutheran1 == T) %>% count(PUBPRIV)
x
CA_vacc %>% subset(Lutheran == T) %>% count(PUBPRIV)
CA_vacc %>% subset(Lutheran == T) %>% count(PUBPRIV)
CA_vacc <- CA_vacc %>% mutate(Lutheran2 = ifelse(PUBPRIV=='PRIVATE' & Lutheran1== T, T, F)
)
CA_vacc %>% subset(Lutheran2 == T) %>% count(PUBPRIV)
count(CA_vacc$Catholic)
CA_vacc %>% subset(Catholic == T) %>% count(PUBPRIV)
CA_vacc <- CA_vacc %>% mutate(Catholic1 = ifelse(PUBPRIV=='PRIVATE' & Catholic== T, T, F))
CA_vacc %>% subset(Catholic1 == T) %>% count(PUBPRIV)
library(forcats) # need this for a few things
library(forcats) # need this for a few things
CA_vacc <- CA_vacc %>%
mutate(school_type = ifelse(Catholic1 == T, "Catholic",
ifelse(Lutheran2 == T, "Lutheran",
ifelse(PUBPRIV=="PRIVATE", "Private - other",
'Public'))))
library(forcats) # need this for a few things
CA_vacc <- CA_vacc %>%
mutate(school_type = factor(ifelse(Catholic1 == T, "Catholic",
ifelse(Lutheran2 == T, "Lutheran",
ifelse(PUBPRIV=="PRIVATE", "Private - other",
'Public')))))
count(school_type)
count(CA_vacc$school_type)
summary(CA_vacc$school_type)
CA_vacc %>% subset(Lutheran2 == T) %>% count(PUBPRIV)
CA_vacc %>% subset(Catholic1 == T) %>% count(PUBPRIV)
CA_vacc %>% subset(Lutheran == T) %>% count(Catholic1)
library(forcats) # need this for a few things
CA_vacc <- CA_vacc %>%
mutate(school_type = factor(ifelse(Lutheran2 == T, "Lutheran",
ifelse(Catholic1 == T, "Catholic",
ifelse(PUBPRIV=="PRIVATE", "Private - other",
'Public')))))
# Note - reordered the above code because some Lutheran schools were also counted as catholic
# which would happen if a shcools name was something like
# " The Holy Lutheran "
summary(CA_vacc$school_type)
CA_vacc %>% subset(Lutheran == T) %>% count(Catholic1)
CA_vacc$school_type2 <- CA_vacc$school_type
?fct_collapse
CA_vacc$school_type2 <- CA_vacc$school_type
CA_vacc <- CA_vacc %>% mutate(school_type2 =
fct_collapse(school_type2, Religous = c("Lutheran", "Catholic")))
summary(CA_vacc$school_type2)
summary(CA_vacc$school_type)
78+682
rents <- read.csv("rents_4000long.csv")
rents$price <- as.integer(rents$rent)
rents$pes_minutes <- as.integer(rents$pes_minutes)
rents <- rents %>% mutate( commute = as.integer((pes_minutes + opt_minutes)/2))
# filter if rents are NA
rents <- rents %>% filter(!(is.na(price)))
#filter if optimisic time > 200
rents <- rents %>% filter(commute <200)
rents <- rents %>% filter(price < 100000)
rents <- rents %>% filter(sqft > 3)
getwd()
setwd("/Users/nancystetson/Google Drive/Midterm/Midterm Presentation")
rents <- read.csv("rents_4000long.csv")
rents$price <- as.integer(rents$rent)
rents$pes_minutes <- as.integer(rents$pes_minutes)
rents <- rents %>% mutate( commute = as.integer((pes_minutes + opt_minutes)/2))
# filter if rents are NA
rents <- rents %>% filter(!(is.na(price)))
#filter if optimisic time > 200
rents <- rents %>% filter(commute <200)
rents <- rents %>% filter(price < 100000)
rents <- rents %>% filter(sqft > 3)
rents <- read.csv("rents_4000long.csv")
rents$price <- as.integer(rents$rent)
rents$pes_minutes <- as.integer(rents$pes_minutes)
rents <- rents %>% mutate( commute = as.integer((pes_minutes + opt_minutes)/2))
rents <- rents %>% filter(!(is.na(price)))
rents <- rents %>% filter(commute <200)
rents <- rents %>% filter(price < 100000)
rents <- rents %>% filter(sqft > 3)
scatter_plot <- rents %>%
ggplot(  aes(commute, price, color=bed_factor) )+
geom_point(size = 1, aes(color= bed_factor))+
geom_smooth(method = lm, size = .8, color = 'navy', alpha = 0.2) +
xlab("Minutes to Downtown SF") +
ylab("Rent" ) +
ggtitle("It is cheaper to live farther from Downtown San Francisco") +
scale_color_brewer(palette = 'Spectral',
guide = guide_legend(title = 'Bedrooms')) +
scale_x_continuous(breaks= seq(0,180, 15)) +
theme_minimal()
scatter_plot
rents <- rents %>% mutate(bed_factor = as.factor(bedrooms))
scatter_plot <- rents %>%
ggplot(  aes(commute, price, color=bed_factor) )+
geom_point(size = 1, aes(color= bed_factor))+
geom_smooth(method = lm, size = .8, color = 'navy', alpha = 0.2) +
xlab("Minutes to Downtown SF") +
ylab("Rent" ) +
ggtitle("It is cheaper to live farther from Downtown San Francisco") +
scale_color_brewer(palette = 'Spectral',
guide = guide_legend(title = 'Bedrooms')) +
scale_x_continuous(breaks= seq(0,180, 15)) +
theme_minimal()
scatter_plot
rents <- read.csv("rents_4000long.csv")
rents$price <- as.integer(rents$rent)
rents$pes_minutes <- as.integer(rents$pes_minutes)
rents <- rents %>% mutate( commute = as.integer((pes_minutes + opt_minutes)/2))
rents <- rents %>% filter(!(is.na(price)))
rents <- rents %>% filter(commute <200)
rents <- rents %>% filter(price < 100000)
scatter_plot <- rents %>%
ggplot(  aes(commute, price, color=bed_factor) )+
geom_point(size = 1, aes(color= bed_factor))+
geom_smooth(method = lm, size = .8, color = 'navy', alpha = 0.2) +
xlab("Minutes to Downtown SF") +
ylab("Rent" ) +
ggtitle("It is cheaper to live farther from Downtown San Francisco") +
scale_color_brewer(palette = 'Spectral',
guide = guide_legend(title = 'Bedrooms')) +
scale_x_continuous(breaks= seq(0,180, 15)) +
theme_minimal()
scatter_plot
rents <- rents %>% mutate(bed_factor = as.factor(bedrooms))
rents <- rents %>% mutate(bed_factor = as.factor(bedrooms))
scatter_plot <- rents %>%
ggplot(  aes(commute, price, color=bed_factor) )+
geom_point(size = 1, aes(color= bed_factor))+
geom_smooth(size = .8, color = 'navy', alpha = 0.2) +
xlab("Minutes to Downtown SF") +
ylab("Rent" ) +
ggtitle("Rent Versus Commute") +
scale_color_brewer(palette = 'Spectral',
guide = guide_legend(title = 'Bedrooms')) +
scale_x_continuous(breaks= seq(0,180, 15)) +
theme_minimal()
scatter_plot
rents <- rents %>% filter(price < 10000)
scatter_plot <- rents %>%
ggplot(  aes(commute, price, color=bed_factor) )+
geom_point(size = 1, aes(color= bed_factor))+
geom_smooth(method = lm, size = .8, color = 'navy', alpha = 0.2) +
xlab("Minutes to Downtown SF") +
ylab("Rent" ) +
ggtitle("It is cheaper to live farther from Downtown San Francisco") +
scale_color_brewer(palette = 'Spectral',
guide = guide_legend(title = 'Bedrooms')) +
scale_x_continuous(breaks= seq(0,180, 15)) +
theme_minimal()
scatter_plot
scatter_plot <- rents %>%
ggplot(  aes(commute, price, color=bed_factor) )+
geom_point(size = 1, aes(color= bed_factor))+
geom_smooth( size = .8, color = 'navy', alpha = 0.2) +
xlab("Minutes to Downtown SF") +
ylab("Rent" ) +
ggtitle("It is cheaper to live farther from Downtown San Francisco") +
scale_color_brewer(palette = 'Spectral',
guide = guide_legend(title = 'Bedrooms')) +
scale_x_continuous(breaks= seq(0,180, 15)) +
theme_minimal()
scatter_plot
rent <- rents %>% filter(bedrooms < 6)
rents <- rents %>% filter(bedrooms < 6)
rents <- rents %>% filter(bedrooms < 6)
scatter_plot <- rents %>%
ggplot(  aes(commute, price, color=bed_factor) )+
geom_point(size = 1, aes(color= bed_factor))+
geom_smooth( size = .8, color = 'navy', alpha = 0.2) +
xlab("Minutes to Downtown SF") +
ylab("Rent" ) +
ggtitle("It is cheaper to live farther from Downtown San Francisco") +
scale_color_brewer(palette = 'Spectral',
guide = guide_legend(title = 'Bedrooms')) +
scale_x_continuous(breaks= seq(0,180, 15)) +
theme_minimal()
scatter_plot
rents <- rents %>% filter(bedrooms < 6)
scatter_plot <- rents %>%
ggplot(  aes(commute, price, color=bed_factor) )+
geom_point(size = 1, aes(color= bed_factor))+
geom_smooth(method = lm, size = .8, color = 'navy', alpha = 0.2) +
xlab("Minutes to Downtown SF") +
ylab("Rent" ) +
ggtitle("It is cheaper to live farther from Downtown San Francisco") +
scale_color_brewer(palette = 'Spectral',
guide = guide_legend(title = 'Bedrooms')) +
scale_x_continuous(breaks= seq(0,180, 15)) +
theme_minimal()
scatter_plot
